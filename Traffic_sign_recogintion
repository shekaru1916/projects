
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from keras.utils.np_utils import to_categorical
from keras.layers import Dropout, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import cv2
from sklearn import model_selection
import os
import pandas as pd
import random
from keras.preprocessing.image import ImageDataGenerator


labelFile = 'labels.csv'
batch_size_val = 50  # how many to process together
steps_per_epoch_val = 446
epochs_val = 10
imageDimensions = (32, 32, 3)
testRatio = 0.2
validationRatio = 0.2
'''Importing of the Images'''
myList = os.listdir('signals_img_data')
noOfClasses = len(myList)
print("Total Classes Detected:", noOfClasses)
print("Importing Classes.....")
count = 0
images = []
classNo = []
for x in range(0, noOfClasses):
    myPicList = os.listdir('signals_img_data/' + str(count))
    for y in myPicList:
        curImg = cv2.imread('signals_img_data/' + str(count) + "/" + y)  #
        images.append(curImg)
        classNo.append(count)
    print(count, end=" ")
    count += 1
print(" ")
# converting list into array
images = np.array(images)
classNo = np.array(classNo)
'''Split Data'''
X_train, X_test, y_train, y_test = model_selection.train_test_split(
    images, classNo, test_size=testRatio)
X_train, X_validation, y_train, y_validation = model_selection.train_test_split(X_train, y_train,
                                                                                test_size=validationRatio)
# X_train = ARRAY OF IMAGES TO TRAIN
# y_train = CORRESPONDING CLASS ID
'''TO CHECK IF NUMBER OF IMAGES MATCHES TO NUMBER OF LABELS FOR EACH DATA SET'''
print("Data Shapes")
print("Train", end="")
print(X_train.shape, y_train.shape)
print("Validation", end="")
print(X_validation.shape, y_validation.shape)
print("Test", end="")
print(X_test.shape, y_test.shape)
assert (X_train.shape[0] == y_train.shape[0]
        ), "No.of images in not equal to the number of labels in training set"
assert (X_validation.shape[0] == y_validation.shape[0]
        ), "No.of images is not equal to number labels in validation set"
assert (X_test.shape[0] == y_test.shape[0]
        ), "The number of images in not equal to the number of labels in test set"


assert (X_train.shape[1:] ==
        imageDimensions), "The dimensions of the Training images are wrong"
assert (X_validation.shape[1:] ==
        imageDimensions), "The dimensions of the Validation images are wrong"
assert (X_test.shape[1:] ==
        imageDimensions), "The dimensions of the Test images are wrong"
'''READ CSV FILE'''
data = pd.read_csv(labelFile)
print("data shape", data.shape, type(data))

'''DISPLAY SOME SAMPLES IMAGES  OF ALL THE CLASSES'''
num_of_samples = []
cols = 5
num_classes = noOfClasses
fig, axs = plt.subplots(nrows=num_classes, ncols=cols, figsize=(5, 300))
fig.tight_layout()
for i in range(cols):
    for j, row in data.iterrows():
        x_selected = X_train[y_train == j]
        axs[j][i].imshow(x_selected[random.randint(
            0, len(x_selected) - 1), :, :], cmap=plt.get_cmap("gray"))
        axs[j][i].axis("off")
        if i == 2:
            axs[j][i].set_title(str(j) + "-" + row["Name"])
            num_of_samples.append(len(x_selected))
'''DISPLAY A BAR CHART SHOWING NO OF SAMPLES FOR EACH CATEGORY'''
print(num_of_samples)
plt.figure(figsize=(12, 4))
plt.bar(range(0, num_classes), num_of_samples)
plt.title("Distribution of the training dataset")
plt.xlabel("Class number")
plt.ylabel("Number of images")
plt.show()


# PREPROCESSING THE IMAGES
def grayscale(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return img


def equalize(img):
    img = cv2.equalizeHist(img)
    return img


def preprocessing(img):
    img = grayscale(img)  # CONVERT TO GRAYSCALE
    img = equalize(img)  # STANDARDIZE THE LIGHTING IN AN IMAGE
    img = img / 255  # TO NORMALIZE VALUES BETWEEN 0 AND 1 INSTEAD OF 0 TO 255
    return img


X_train = np.array(list(map(preprocessing, X_train)))
X_validation = np.array(list(map(preprocessing, X_validation)))
X_test = np.array(list(map(preprocessing, X_test)))


'''ADD A DEPTH OF 1'''
X_train = X_train.reshape(
    X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)
X_validation = X_validation.reshape(
    X_validation.shape[0], X_validation.shape[1], X_validation.shape[2], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)

'''AUGMENTATION OF IMAGES: TO MAKE IT MORE GENERIC'''
dataGen = ImageDataGenerator(
    width_shift_range=0.1, height_shift_range=0.1, zoom_range=0.2, rotation_range=10)
dataGen.fit(X_train)
batches = dataGen.flow(X_train, y_train, batch_size=20)
X_batch, y_batch = next(batches)

'''TO SHOW ARGUMENTS IMAGE SAMPLES'''
fig, axs = plt.subplots(1, 15, figsize=(20, 5))
fig.tight_layout()

for i in range(15):
    axs[i].imshow(X_batch[i].reshape(imageDimensions[0], imageDimensions[1]))
    axs[i].axis('off')
plt.show()

y_train = to_categorical(y_train, noOfClasses)
y_validation = to_categorical(y_validation, noOfClasses)
y_test = to_categorical(y_test, noOfClasses)

'''CONVOLUTION NEURAL NETWORK MODEL'''


def my_model():
    t_model = Sequential()
    t_model.add(Conv2D(filters=32, kernel_size=(5, 5),
                activation='relu', input_shape=X_train.shape[1:]))
    t_model.add(Conv2D(filters=32, kernel_size=(5, 5), activation='relu'))
    t_model.add(MaxPooling2D(pool_size=(2, 2)))
    t_model.add(Dropout(rate=0.25))
    t_model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
    t_model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
    t_model.add(MaxPooling2D(pool_size=(2, 2)))
    t_model.add(Dropout(rate=0.25))
    t_model.add(Flatten())
    t_model.add(Dense(256, activation='relu'))
    t_model.add(Dropout(rate=0.5))
    t_model.add(Dense(43, activation='softmax'))
    # COMPILE MODEL
    t_model.compile(
        Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
    return t_model


'''TRAIN'''
model = my_model()
print(model.summary())
history = model.fit(dataGen.flow(X_train, y_train, batch_size=batch_size_val), steps_per_epoch=steps_per_epoch_val,
                    epochs=epochs_val, validation_data=(X_validation, y_validation), shuffle=1)
'''PLOT'''
plt.figure(1)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['training', 'validation'])
plt.title('loss')
plt.xlabel('epoch')
plt.figure(2)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['training', 'validation'])
plt.title('accuracy')
plt.xlabel('epoch')
plt.show()
score = model.evaluate(X_test, y_test, verbose=0)
print('Test Score:', score[0])
print('Test Accuracy:', score[1])\

# STORE THE MODEL AS A CLASSIFIER FILE

model.save('model.h5')
